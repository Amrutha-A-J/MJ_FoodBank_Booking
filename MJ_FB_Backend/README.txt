# Project Overview

Frontend: https://github.com/Amrutha-A-J/MJ_FB_Frontend
Backend: https://github.com/Amrutha-A-J/MJ_FB_Backend
Run `npm run migrate` to apply TypeScript database migrations from `src/migrations`.


## Delivery Data Seeder

Run `npm run seed:delivery` to insert the default delivery categories and items using the database
credentials from your `.env` file. The script is idempotent—rerun it any time to sync category
limits and add missing items without creating duplicates.


## Requirements

- Node.js 22 or later is required for native `fetch` support; earlier versions are not supported.

## Environment Variables

`PG_HOST` – PostgreSQL host.

`PG_PORT` – PostgreSQL port.

`PG_USER` – PostgreSQL username.

`PG_PASSWORD` – PostgreSQL password.

`PG_DATABASE` – PostgreSQL database name.

`FRONTEND_ORIGIN` – Comma-separated list of frontend origin URLs allowed for CORS. Empty entries are ignored. Defaults to `http://localhost:5173,http://127.0.0.1:5173` if unset.

`JWT_SECRET` – Secret key used to sign and verify JSON Web Tokens. **Required**. Generate a strong random value (e.g., `openssl rand -hex 32`).

`JWT_REFRESH_SECRET` – Secret key used to sign refresh JSON Web Tokens. **Required**. Use a value different from `JWT_SECRET`.

`COOKIE_DOMAIN` – Optional domain attribute for authentication cookies. Set when cookies should be shared across subdomains.

Authentication cookies are scoped to the `/` path and use the same options when cleared.

`PORT` – Port for the backend server.

`BREVO_API_KEY` – Brevo API key for sending transactional emails.

`BREVO_FROM_EMAIL` – Email address used as the sender.

`BREVO_FROM_NAME` – Optional display name for the sender.

`PASSWORD_SETUP_TOKEN_TTL_HOURS` – Hours until password setup tokens expire (default 24).

`PASSWORD_SETUP_TEMPLATE_ID` – Brevo template ID used for password setup emails (default 6).

`BOOKING_CONFIRMATION_TEMPLATE_ID` – Brevo template ID for booking confirmation emails.

`BOOKING_REMINDER_TEMPLATE_ID` – Brevo template ID for booking reminder emails.

`BOOKING_STATUS_TEMPLATE_ID` – Brevo template ID for booking status emails (cancellations, reschedules, no-shows).

`VOLUNTEER_BOOKING_CONFIRMATION_TEMPLATE_ID` – Brevo template ID for volunteer booking confirmations.

`VOLUNTEER_BOOKING_REMINDER_TEMPLATE_ID` – Brevo template ID for volunteer shift reminder emails.

`VOLUNTEER_BOOKING_NOTIFICATION_TEMPLATE_ID` – Brevo template ID for volunteer booking notifications (cancellations, coordinator alerts).

`DONOR_TEMPLATE_ID_1_100` – Brevo template ID for $1–$100 donor emails (default 11).

`DONOR_TEMPLATE_ID_101_500` – Brevo template ID for $101–$500 donor emails (default 12).

`DONOR_TEMPLATE_ID_501_1000` – Brevo template ID for $501–$1,000 donor emails (default 13).

`DONOR_TEMPLATE_ID_1001_10000` – Brevo template ID for $1,001–$10,000 donor emails (default 14).

`DONOR_TEMPLATE_ID_10001_30000` – Brevo template ID for $10,001–$30,000 donor emails (default 15).

`VOLUNTEER_NO_SHOW_HOURS` – Hours to wait before marking a volunteer shift as no-show (default 24).

`TELEGRAM_BOT_TOKEN` – Telegram bot token for ops alerts (optional).

`TELEGRAM_ALERT_CHAT_ID` – Telegram chat ID that receives ops alerts (optional).

`WEBAUTHN_RP_ID` – Relying party ID used to validate WebAuthn assertions (typically your domain).

`WEBAUTHN_ORIGIN` – Expected origin (scheme + host + optional port) for WebAuthn assertions.

Booking confirmation and reminder templates can surface Google and Apple calendar links by
referencing `{{ params.googleCalendarLink }}` and `{{ params.appleCalendarLink }}` in the Brevo
templates. These URLs are generated by the backend; no additional configuration is needed beyond
setting the appropriate template IDs above. Apple calendar links are sent as base64-encoded ICS
data URLs to ensure Brevo preserves them.

Tests load required environment variables from `.env.test`, which Jest reads via `tests/loadEnv.ts`. Run `npm test` so this setup executes, and update `.env.test` when adding new environment settings.

## Booking Notes

Clients may include a **client note** when booking. Staff can record a **staff note** when marking a visit in the pantry schedule. Staff users automatically receive staff notes from `/bookings/history`; responses for other roles exclude staff notes. The `notes` query parameter filters history by note text.

Booking history joins bookings with `client_visits` and only exposes `staff_note` when the requester is staff or `includeStaffNotes=true`.

## Password Policy

Passwords must be at least 8 characters long and include at least one uppercase letter, one lowercase letter, one number, and one special character. Requests with weak passwords are rejected before hashing.

## Authentication Tokens

Login responses now return a JSON Web Token (JWT) instead of a simple `type:id` string. Clients must send this token in the `Authorization` header using the standard Bearer format:

```
Authorization: Bearer <token>
```

The token payload includes the user's `id`, `role`, and `type` and expires after one hour.

## Volunteer Bookings by Date Endpoint

`GET /volunteer-bookings/by-date?date=YYYY-MM-DD`

Returns all volunteer bookings for the specified date. Requires staff authentication.

## Donation Aggregations Endpoint

`GET /donations/aggregations?year=YYYY`

Returns a list of donors with their total donated weight for each month of the specified year.
Every donor in the system is included even if they have no donations in that year; months
without records report `0`.

## Monetary Donor Insights Endpoint

`GET /monetary-donors/insights?months=NUMBER&endMonth=YYYY-MM`

Returns windowed metrics used by the donor dashboard. Authentication requires a staff session with the `donor_management` access flag.

- `months` (optional, default 6) – number of months to include, clamped between 1 and 24.
- `endMonth` (optional) – ISO year-month for the final month in the window. If omitted, the API uses the previous calendar month.

Response JSON:

- `window` – `{ startMonth, endMonth, months }` reflecting the reporting range.
- `monthly` – array of `{ month, totalAmount, donationCount, donorCount, averageGift }` summarizing each month in the range.
- `ytd` – year-to-date totals with `totalAmount`, `donationCount`, `donorCount`, `averageGift`, `averageDonationsPerDonor`, and `lastDonationISO`.
- `topDonors` – top five donors in the window including `id`, `firstName`, `lastName`, `email`, `windowAmount`, `lifetimeAmount`, and `lastDonationISO`.
- `givingTiers` – current and previous month tallies for donor tiers (`1-100`, `101-500`, `501-1000`, `1001-10000`, `10001-30000`) with `donorCount` and `totalAmount` per tier.
- `firstTimeDonors` – donors whose first recorded gift falls in the most recent month, with donation date and amount.
- `pantryImpact` – pantry families, adults, children, and pounds served for the selected month.

## Zeffy Donation Import

The Zeffy donation importer accepts spreadsheets exported from Zeffy. Upload files at
`POST /monetary-donors/import` or through Donor Management → Donors → Import Zeffy Donations.
Each worksheet must include the following columns:

- `First Name`
- `Last Name`
- `Email`
- `Payment Date` *(or the timezone-specific header `Payment Date (America/Regina)`)*
- `Payment Status`
- `Total Amount`

Additional columns are ignored. The importer only records donations whose **Payment Status** is
`Succeeded` and converts the **Payment Date** to Regina time when timestamps are provided.

## Warehouse Overall Available Years Endpoint

`GET /warehouse-overall/years`

Returns an array of years for which warehouse summary data exists, ordered from most recent to oldest.
