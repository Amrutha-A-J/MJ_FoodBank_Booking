import { Client } from 'pg';
import config from './config';

export async function setupDatabase() {
  const dbName = config.pgDatabase;
  const dbConfig = {
    user: config.pgUser,
    password: config.pgPassword,
    host: config.pgHost,
    port: config.pgPort,
  };

  // Connect to default database to ensure target database exists
  const adminClient = new Client({ ...dbConfig, database: 'postgres' });
  await adminClient.connect();
  const dbExists = await adminClient.query('SELECT 1 FROM pg_database WHERE datname = $1', [dbName]);
  if (dbExists.rowCount === 0) {
    await adminClient.query(`CREATE DATABASE ${dbName}`);
    console.log(`Created database ${dbName}`);
  }
  await adminClient.end();

  // Now connect to the target database
  const client = new Client({ ...dbConfig, database: dbName });
  await client.connect();

  // Create tables if they do not exist
  await client.query(`
CREATE TABLE IF NOT EXISTS slots (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    max_capacity integer NOT NULL,
    UNIQUE (start_time, end_time)
);

CREATE TABLE IF NOT EXISTS users (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    first_name text,
    last_name text,
    email text UNIQUE,
    phone text,
    password text NOT NULL,
    client_id bigint NOT NULL UNIQUE CHECK (client_id >= 1 AND client_id <= 9999999),
    role text NOT NULL CHECK (role IN ('shopper', 'delivery')),
    bookings_this_month integer DEFAULT 0,
    booking_count_last_updated timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS staff (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    first_name varchar(100) NOT NULL,
    last_name varchar(100) NOT NULL,
    role varchar(50) NOT NULL CHECK (role IN ('staff', 'admin')),
    email varchar(255) NOT NULL UNIQUE,
    password varchar(255) NOT NULL
);
CREATE TABLE IF NOT EXISTS volunteer_master_roles (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name text NOT NULL
);

CREATE TABLE IF NOT EXISTS volunteer_roles (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name text NOT NULL,
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    max_volunteers integer NOT NULL,
    category_id integer NOT NULL REFERENCES public.volunteer_master_roles(id),
    is_wednesday_slot boolean DEFAULT false,
    is_active boolean DEFAULT true
);

CREATE TABLE IF NOT EXISTS volunteers (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    first_name text NOT NULL,
    last_name text NOT NULL,
    email text,
    phone text,
    username text NOT NULL UNIQUE,
    password text NOT NULL
);

CREATE TABLE IF NOT EXISTS volunteer_trained_roles (
    volunteer_id integer NOT NULL,
    role_id integer NOT NULL,
    PRIMARY KEY (volunteer_id, role_id),
    FOREIGN KEY (volunteer_id) REFERENCES public.volunteers(id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES public.volunteer_master_roles(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS bookings (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id integer,
    slot_id integer,
    status text NOT NULL CHECK (status = ANY (ARRAY['submitted', 'approved', 'rejected', 'preapproved', 'cancelled'])),
    request_data text,
    date date,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    is_staff_booking boolean DEFAULT false,
    reschedule_token text,
    FOREIGN KEY (slot_id) REFERENCES public.slots(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id)
);

CREATE TABLE IF NOT EXISTS breaks (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    day_of_week integer NOT NULL,
    slot_id integer NOT NULL,
    reason text,
    UNIQUE (day_of_week, slot_id),
    FOREIGN KEY (slot_id) REFERENCES public.slots(id)
);

CREATE TABLE IF NOT EXISTS blocked_slots (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    date date NOT NULL,
    slot_id integer NOT NULL,
    reason text,
    UNIQUE (date, slot_id),
    FOREIGN KEY (slot_id) REFERENCES public.slots(id)
);

CREATE TABLE IF NOT EXISTS holidays (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    date date NOT NULL UNIQUE,
    reason text
);

CREATE TABLE IF NOT EXISTS volunteer_bookings (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    volunteer_id integer NOT NULL,
    role_id integer NOT NULL,
    date date NOT NULL,
    status text DEFAULT 'pending' NOT NULL CHECK (status IN ('pending', 'approved', 'rejected', 'cancelled')),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    reschedule_token text,
    FOREIGN KEY (role_id) REFERENCES public.volunteer_roles(id) ON DELETE CASCADE,
    FOREIGN KEY (volunteer_id) REFERENCES public.volunteers(id) ON DELETE CASCADE
);
`);

  // Remove duplicate slots and enforce uniqueness
  await client.query(`
    DELETE FROM slots a
    USING slots b
    WHERE a.id > b.id
      AND a.start_time = b.start_time
      AND a.end_time = b.end_time;
  `);
  await client.query(
    `CREATE UNIQUE INDEX IF NOT EXISTS slots_unique_start_end ON slots (start_time, end_time);`
  );

  // Insert master data
  await client.query(`
INSERT INTO slots (start_time, end_time, max_capacity) VALUES
('09:30:00', '10:00:00', 4),
('10:00:00', '10:30:00', 4),
('10:30:00', '11:00:00', 4),
('11:00:00', '11:30:00', 4),
('11:30:00', '12:00:00', 4),
('12:00:00', '12:30:00', 4),
('12:30:00', '13:00:00', 4),
('13:00:00', '13:30:00', 4),
('13:30:00', '14:00:00', 4),
('14:00:00', '14:30:00', 4),
('14:30:00', '15:00:00', 4),
('15:00:00', '15:30:00', 4),
('15:30:00', '16:00:00', 4),
('16:00:00', '16:30:00', 4),
('16:30:00', '17:00:00', 4),
('17:00:00', '17:30:00', 4),
('17:30:00', '18:00:00', 4),
('18:00:00', '18:30:00', 4)
ON CONFLICT (start_time, end_time) DO NOTHING;

INSERT INTO breaks (day_of_week, slot_id, reason) VALUES
(1, 6, 'Lunch Break'),
(2, 6, 'Lunch Break'),
(3, 6, 'Lunch Break'),
(4, 6, 'Lunch Break'),
(5, 6, 'Lunch Break'),
(1, 7, 'Lunch Break'),
(2, 7, 'Lunch Break'),
(3, 7, 'Lunch Break'),
(4, 7, 'Lunch Break'),
(5, 7, 'Lunch Break'),
(3, 12, 'Evening Break'),
(3, 13, 'Evening Break')
ON CONFLICT (day_of_week, slot_id) DO NOTHING;

INSERT INTO staff (first_name, last_name, role, email, password) VALUES
('Admin', 'Admin', 'staff', 'harvestpantry@mjfoodbank.com', '$2b$10$n4bMtLafHD1zHgoeNBdGauGNd3OPuOMp8SGFP3IFXk5v6ItfHAdrG')
ON CONFLICT (email) DO NOTHING;
 
INSERT INTO volunteer_master_roles (id, name) VALUES
(1, 'Pantry'),
(2, 'Warehouse'),
(3, 'Gardening'),
(4, 'Administration'),
(5, 'Special Events')
ON CONFLICT DO NOTHING;

INSERT INTO volunteer_roles (name, start_time, end_time, max_volunteers, category_id, is_wednesday_slot) VALUES
('Food Sorter', '09:00:00', '12:00:00', 3, 2, false),
('Production Worker', '09:00:00', '12:00:00', 3, 2, false),
('Driver Assistant', '09:00:00', '12:00:00', 1, 2, false),
('Loading Dock Personnel', '09:00:00', '12:00:00', 1, 2, false),
('General Cleaning & Maintenance', '08:00:00', '11:00:00', 1, 2, false),
('Reception', '09:00:00', '12:00:00', 1, 1, false),
('Reception', '12:30:00', '15:30:00', 1, 1, false),
('Reception', '15:30:00', '18:30:00', 1, 1, true),
('Greeter / Pantry Assistant', '09:00:00', '12:00:00', 3, 1, false),
('Greeter / Pantry Assistant', '12:30:00', '15:30:00', 3, 1, false),
('Greeter / Pantry Assistant', '15:30:00', '18:30:00', 2, 1, true),
('Greeter / Pantry Assistant', '16:30:00', '19:30:00', 2, 1, true),
('Stock Person', '08:00:00', '11:00:00', 1, 1, false),
('Stock Person', '12:00:00', '15:00:00', 1, 1, false),
('Gardening Assistant', '13:00:00', '16:00:00', 2, 3, false),
('Event Organizer', '09:00:00', '17:00:00', 5, 5, false),
('Event Resource Specialist', '09:00:00', '17:00:00', 5, 5, false),
('Volunteer Marketing Associate', '08:00:00', '16:00:00', 1, 4, false),
('Client Resource Associate', '08:00:00', '16:00:00', 1, 4, false),
('Assistant Volunteer Coordinator', '08:00:00', '16:00:00', 1, 4, false),
('Volunteer Office Administrator', '08:00:00', '16:00:00', 1, 4, false)
ON CONFLICT DO NOTHING;
`);

  await client.end();
}
