name: Release

on:
  workflow_dispatch:
  push:
    branches: [ master, main ]
    tags: ['v*']

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      # === Test-time env to satisfy config validation ===
      JWT_SECRET: testsecret
      JWT_REFRESH_SECRET: testrefresh
      BOOKING_CONFIRMATION_TEMPLATE_ID: "1"
      BOOKING_REMINDER_TEMPLATE_ID: "2"
      VOLUNTEER_BOOKING_CONFIRMATION_TEMPLATE_ID: "3"
      VOLUNTEER_BOOKING_REMINDER_TEMPLATE_ID: "4"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      # ---- BACKEND TESTS ----
      - name: Install backend dependencies
        working-directory: MJ_FB_Backend
        run: npm ci

      - name: Run backend tests (non-blocking for now)
        working-directory: MJ_FB_Backend
        run: npm test
        continue-on-error: true   # <-- set to false later when you're ready

      # ---- FRONTEND TESTS (optional) ----
      - name: Install frontend dependencies
        working-directory: MJ_FB_Frontend
        run: npm ci

      - name: Run frontend tests (non-blocking for now)
        working-directory: MJ_FB_Frontend
        run: npm test
        continue-on-error: true   # <-- set to false later when you're ready

  build-and-push:
    needs: build-test
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.ref_name }}   # 'main', 'master', or a tag like v1.0.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # If your frontend needs VITE_API_BASE at build time (Vite typical):
      # Create a repo variable BACKEND_API_BASE (or commit MJ_FB_Frontend/.env)
      - name: Ensure VITE_API_BASE (optional)
        if: ${{ vars.BACKEND_API_BASE != '' }}
        working-directory: MJ_FB_Frontend
        run: |
          echo "VITE_API_BASE=${{ vars.BACKEND_API_BASE }}" > .env
          echo "Using VITE_API_BASE=${{ vars.BACKEND_API_BASE }}"

      # ---- Build images on GitHub runner ----
      - name: Build backend image
        run: docker build -t mjfb-backend:${{ env.IMAGE_TAG }} MJ_FB_Backend

      - name: Build frontend image
        run: docker build -t mjfb-frontend:${{ env.IMAGE_TAG }} MJ_FB_Frontend

      # ---- Tag & push to ACR (also push :latest) ----
      - name: Tag & Push images
        env:
          REGISTRY: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        run: |
          docker tag mjfb-backend:${{ env.IMAGE_TAG }}  $REGISTRY/mjfb-backend:${{ env.IMAGE_TAG }}
          docker tag mjfb-backend:${{ env.IMAGE_TAG }}  $REGISTRY/mjfb-backend:latest
          docker tag mjfb-frontend:${{ env.IMAGE_TAG }} $REGISTRY/mjfb-frontend:${{ env.IMAGE_TAG }}
          docker tag mjfb-frontend:${{ env.IMAGE_TAG }} $REGISTRY/mjfb-frontend:latest

          docker push $REGISTRY/mjfb-backend:${{ env.IMAGE_TAG }}
          docker push $REGISTRY/mjfb-backend:latest
          docker push $REGISTRY/mjfb-frontend:${{ env.IMAGE_TAG }}
          docker push $REGISTRY/mjfb-frontend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
      BACKEND_APP_NAME: ${{ vars.BACKEND_APP_NAME }}
      FRONTEND_APP_NAME: ${{ vars.FRONTEND_APP_NAME }}
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # If apps already exist, this updates them to :latest.
      # If they don't exist yet, create them once from Azure CLI (as we did in PowerShell).
      - name: Deploy backend (latest)
        uses: azure/container-apps-deploy@v2
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          containerAppName: ${{ env.BACKEND_APP_NAME }}
          imageToDeploy: ${{ secrets.REGISTRY_LOGIN_SERVER }}/mjfb-backend:latest

      - name: Deploy frontend (latest)
        uses: azure/container-apps-deploy@v2
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          containerAppName: ${{ env.FRONTEND_APP_NAME }}
          imageToDeploy: ${{ secrets.REGISTRY_LOGIN_SERVER }}/mjfb-frontend:latest
